{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { HttpClient, HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nvar API_HOST = environment.apiHost;\nvar ApiService = /** @class */function () {\n  function ApiService(http) {\n    this.http = http;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  ApiService.handleError = function (error) {\n    alert(error.message);\n  };\n  ApiService.extractData = function (res) {\n    var body = res;\n    return body || {};\n  };\n  ApiService.prototype.setAuthToken = function (token) {\n    this.httpOptions.headers = this.httpOptions.headers.append('Authorization', \"jwt \".concat(token));\n    this.token = token;\n  };\n  ApiService.prototype.get = function (endpoint) {\n    var url = \"\".concat(API_HOST).concat(endpoint);\n    var req = this.http.get(url, this.httpOptions).pipe(map(ApiService.extractData));\n    return req.toPromise().catch(function (e) {\n      ApiService.handleError(e);\n      throw e;\n    });\n  };\n  ApiService.prototype.post = function (endpoint, data) {\n    var url = \"\".concat(API_HOST).concat(endpoint);\n    return this.http.post(url, data, this.httpOptions).toPromise().catch(function (e) {\n      ApiService.handleError(e);\n      throw e;\n    });\n  };\n  ApiService.prototype.upload = function (endpoint, file, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var signed_url, headers, req;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.get(\"\".concat(endpoint, \"/signed-url/\").concat(file.name))];\n          case 1:\n            signed_url = _a.sent().url;\n            headers = new HttpHeaders({\n              'Content-Type': file.type\n            });\n            req = new HttpRequest('PUT', signed_url, file, {\n              headers: headers,\n              reportProgress: true // track progress\n            });\n\n            return [2 /*return*/, new Promise(function (resolve) {\n              _this.http.request(req).subscribe(function (resp) {\n                if (resp && resp.status && resp.status === 200) {\n                  resolve(_this.post(endpoint, payload));\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n}();\nexport { ApiService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}